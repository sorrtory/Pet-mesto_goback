{
	"info": {
		"_postman_id": "2514b932-eee8-4f42-afc4-69d171f6a1ea",
		"name": "Mesto API",
		"description": "The Yandex Practicum Mesto project's API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41814150"
	},
	"item": [
		{
			"name": "Get me",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const schema = {",
							"    required: [\"name\", \"about\", \"avatar\", \"id\"],",
							"};",
							"",
							"pm.test('Response is valid', function() {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/me",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update avatar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Avatar is updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.avatar).to.eql(\"https://google.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"avatar\" : \"https://google.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/me/avatar",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"me",
						"avatar"
					]
				}
			},
			"response": []
		},
		{
			"name": "Rename me",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"This test doesn't run inside a collection :(\")",
							"pm.test(\"Name and BIO are updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Marie Skłodowska Curie\");",
							"    pm.expect(jsonData.about).to.eql(\"Physicist and Chemist\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cache-Control",
						"value": "no-cache",
						"name": "cache-control",
						"type": "text"
					},
					{
						"key": "Postman-Token",
						"value": "<calculated when request is sent>",
						"name": "postman-token",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/javascript",
						"name": "content-type",
						"type": "text"
					},
					{
						"key": "Content-Length",
						"value": "<calculated when request is sent>",
						"name": "content-length",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "<calculated when request is sent>",
						"name": "host",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "PostmanRuntime/7.39.1",
						"name": "user-agent",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"name": "accept",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "gzip, deflate, br",
						"name": "accept-encoding",
						"type": "text"
					},
					{
						"key": "Connection",
						"value": "keep-alive",
						"name": "connection",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Marie Skłodowska Curie\",\n    \"about\": \"Physicist and Chemist\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/me",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get cards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is a valid JSON\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.test(\"Response should be an array\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Each item in the array should have the required properties\", function () {",
							"    const response = pm.response.json();",
							"    response.forEach(card => {",
							"        pm.expect(card).to.have.all.keys('id', 'name', 'link', 'owner_id', 'createdAt', 'likes');",
							"    });",
							"});",
							"",
							"pm.test(\"Each card in the response has a valid 'likes' array\", function () {",
							"    const response = pm.response.json();",
							"    response.forEach(card => {",
							"        pm.expect(card.likes).to.be.an('array');",
							"        card.likes.forEach(like => {",
							"            pm.expect(like).to.have.all.keys('name', 'about', 'avatar', 'id', 'cohort');",
							"            pm.expect(like.name).to.be.a('string');",
							"            pm.expect(like.about).to.be.a('string');",
							"            pm.expect(like.avatar).to.be.a('string').that.matches(/^https?:\\/\\/[^\\s]+$/); // check if avatar is a valid URL",
							"            pm.expect(like._id).to.be.a('string');",
							"            pm.expect(like.cohort).to.be.a('string');",
							"        });",
							"    });",
							"});",
							"",
							"pm.test(\"Each card has a valid 'owner' object\", function () {",
							"    const response = pm.response.json();",
							"    response.forEach(card => {",
							"        pm.expect(card.owner).to.have.all.keys('name', 'about', 'avatar', 'id', 'cohort');",
							"        pm.expect(card.owner.name).to.be.a('string');",
							"        pm.expect(card.owner.about).to.be.a('string');",
							"        pm.expect(card.owner.avatar).to.be.a('string').that.matches(/^https?:\\/\\/[^\\s]+$/); // check if avatar is a valid URL",
							"        pm.expect(card.owner._id).to.be.a('string');",
							"        pm.expect(card.owner.cohort).to.be.a('string');",
							"    });",
							"});",
							"",
							"pm.test(\"Check 'createdAt' field is a valid date\", function () {",
							"    const response = pm.response.json();",
							"    response.forEach(card => {",
							"        pm.expect(Date.parse(card.createdAt)).to.not.be.NaN; // Ensure it's a valid date",
							"    });",
							"});",
							"",
							"pm.test(\"Check 'link' field is a valid URL\", function () {",
							"    const response = pm.response.json();",
							"    response.forEach(card => {",
							"        pm.expect(card.link).to.be.a('string').that.matches(/^https?:\\/\\/[^\\s]+$/); // check if link is a valid URL",
							"    });",
							"});",
							"",
							"pm.test(\"Check 'id' field is a string\", function () {",
							"    const response = pm.response.json();",
							"    response.forEach(card => {",
							"        pm.expect(card.id).to.be.a('string');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/cards",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"cards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"This test doesn't run inside a collection :(\")",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is a valid JSON\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.all.keys('id', 'name', 'link', 'owner_id', 'createdAt');",
							"});",
							"",
							"pm.test(\"Check 'likes' is an array\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.likes).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Check '_id' is a string\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response._id).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Check 'name' is a string\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.name).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Check 'owner' object has required fields\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.owner).to.have.all.keys('name', 'about', 'avatar', 'id', 'cohort');",
							"    pm.expect(response.owner.name).to.be.a('string');",
							"    pm.expect(response.owner.about).to.be.a('string');",
							"    pm.expect(response.owner._id).to.be.a('string');",
							"    pm.expect(response.owner.cohort).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Check 'createdAt' is a valid date\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(Date.parse(response.createdAt)).to.not.be.NaN; // Ensure it's a valid date",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cache-Control",
						"value": "no-cache",
						"name": "cache-control",
						"type": "text"
					},
					{
						"key": "Postman-Token",
						"value": "<calculated when request is sent>",
						"name": "postman-token",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"name": "content-type",
						"type": "text"
					},
					{
						"key": "Content-Length",
						"value": "<calculated when request is sent>",
						"name": "content-length",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "<calculated when request is sent>",
						"name": "host",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "PostmanRuntime/7.39.1",
						"name": "user-agent",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"name": "accept",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "gzip, deflate, br",
						"name": "accept-encoding",
						"type": "text"
					},
					{
						"key": "Connection",
						"value": "keep-alive",
						"name": "connection",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n// \"name\": \"zxx1\",\n// \"link\": \"https://encrypted-tbn0.gstatic.com/licensed-image?q=tbn:ANd9GcT6Ew_PgesXXnu5MTM1S0oP6xlIqGas2rrTf7Vu4SyePTfIrPkBlDCm2NjkE3Ymd1QnT3mmpulyQPzADDg\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/cards",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"cards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is a valid JSON\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/cards/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"cards",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set like",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is a valid JSON\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/cards/likes/:cardId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"cards",
						"likes",
						":cardId"
					],
					"variable": [
						{
							"key": "cardId",
							"value": "2",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete like",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is a valid JSON\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/cards/likes/:cardId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"cards",
						"likes",
						":cardId"
					],
					"variable": [
						{
							"key": "cardId",
							"value": "2",
							"type": "string"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "yandex_url",
			"value": "https://nomoreparties.co/cohort0",
			"type": "string"
		},
		{
			"key": "token",
			"value": "80a75492-21c5-4330-a02f-308029e94b63",
			"type": "string"
		},
		{
			"key": "localhost",
			"value": "http://localhost/api",
			"type": "string"
		},
		{
			"key": "base_url",
			"value": "{{localhost}}",
			"type": "string"
		},
		{
			"key": "base_url",
			"value": "{{yandex_url}}",
			"type": "string",
			"disabled": true
		}
	]
}